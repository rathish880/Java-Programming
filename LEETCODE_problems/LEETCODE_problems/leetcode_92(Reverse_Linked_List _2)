/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        if(head==null || head.next==null || right-left==0)
            return head;
        int length=0;
        ListNode demo =head;
        while(demo!=null){
            demo=demo.next;
            length++;
        }
        
        if(left==1 && right==length){
            ListNode dummy=head;
            int a=right;
            while(a>0){
                if(dummy!=null)
                    dummy=dummy.next;
                a--;
            }

            ListNode prev=null;
            ListNode curr=head;
            ListNode nxt=curr.next;
            int count=right-left+1;
            
            while(count>0){
                if(curr!=null){
                    curr.next=prev;
                    prev=curr;
                    curr=nxt;
                    if(nxt!=null){
                        nxt=nxt.next;
                    }
                    count--;
                }

            }head=prev;
            if(dummy!=null){
                dummy.next=prev;
                return dummy;
            }
            return head;

        }

        if(left==1){
            ListNode demo1=head;
            ListNode prev=head;
            ListNode curr=prev.next;
            ListNode nxt=curr.next;
            for(int i=0;i<right-left;i++){
                curr.next=prev;
                prev=curr;
                curr=nxt;
                if(nxt!=null){
                    nxt=nxt.next;
                }
            }
            head=prev;
            demo1.next=curr;
            return head;

            
        }



        ListNode left1=new ListNode(0);
        left1.next=head;
        for(int i=1;i<left;i++){
            left1=left1.next;
        }
        ListNode start=left1.next;
        ListNode innerStart=start;
    
        ListNode right1=head.next;
        ListNode end=head;
        
        for(int i=1;i<=right-1;i++){
            end=end.next;
            right1=right1.next;
        }
        ListNode curr=start.next;
        //ListNode
        ListNode nxt=curr.next;
        int count=right-left;
        while(count>0){
            // nxt.next=start;
            // start=nxt;
            // nxt=nxt.next;
            curr.next=start;
            start=curr;
            curr=nxt;
            if(nxt!=null){
                nxt=nxt.next;
            }
            count--;
        }
        // if(left1!=null){
            left1.next=start;
            innerStart.next=right1;
        // }
        // else{
        //     head=start;
        //     innerStart.next=left1;
        //     left1=innerStart;
        //     return start;
        // }
        

    return head;
    }
}



 // code with fewer lines

class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        while(head==null || right==left){
            return head;

        }
        ListNode prev=null;
        ListNode curr=head;
        for(int i=0;curr!=null && i<left-1;i++){
            prev=curr;
            curr=curr.next;
        }
        ListNode last=prev;
        ListNode newEnd=curr;
        ListNode next=curr.next;
        for(int i=0;curr!=null && i<right-left+1;i++){
            curr.next=prev;
            prev=curr;
            curr=next;
            if(next!=null){
                next=next.next;
            }
        }
        if(last!=null){
            last.next=prev;
        }else{
            head=prev;
        }
        newEnd.next=curr;
        return head;
    }
}